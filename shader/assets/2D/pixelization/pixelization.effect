// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        size: { value: [500.0, 500.0], editor: { tooltip: '节点尺寸' } }

}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>

  in vec4 color;

  uniform Properties {
    vec2 size;
  };

  const float COLOR_RADIUS = 15.; // 马赛克块颜色的加权的半径范围，越大马赛克块之间过渡越自然
  const float BLOCK_RADIUS = 15.; // 马赛克块的加权的半径范围，越大马赛克越大
  const float PI = 3.141592654;
  const float MY_E = 2.718281828;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      float sumWeight = 0.;
      vec2 onePixelSize = vec2(1, 1) / size;
      //卷积
      float blockWidth = BLOCK_RADIUS * 2. * onePixelSize.x;
      float blockHeight = BLOCK_RADIUS * 2. * onePixelSize.y;
      float row = floor(uv0.x / blockWidth);// 所在pixel在第几行
      float column = floor(uv0.y / blockHeight);// 所在pixel在第几列
      vec2 conversionUv = vec2(row * blockWidth, column * blockHeight);//转换后的uv
      for(float r = -COLOR_RADIUS; r <= COLOR_RADIUS; r++) { // 水平方向
          for(float c = -COLOR_RADIUS; c <= COLOR_RADIUS; c++) { // 垂直方向
              vec2 targetUv = conversionUv + vec2(r * onePixelSize.x, c * onePixelSize.y); // 目标像素位置
              if(targetUv.x < 0. || targetUv.x > 1. || targetUv.y < 0. || targetUv.y > 1.) {
                  continue;
              }
              float weight = (COLOR_RADIUS - abs(r)) * (COLOR_RADIUS - abs(c)); // 计算权重
              o += texture(cc_spriteTexture, targetUv) * weight; // 累加颜色
              sumWeight += weight; // 累加权重
          }
      }
      o /= sumWeight;
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%
